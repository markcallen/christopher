---
description: Guidelines for writing pytest tests in our project
globs: 
alwaysApply: false
---
---
description: Guidelines for writing pytest tests in our project
globs: tests/**/*.py
alwaysApply: false
---
# Testing Guidelines

This document outlines the standards and best practices for writing tests in our project using pytest.

## File Structure and Naming

1. All test files should be placed in the `tests/` directory
2. Test files should be named `test_*.py`
3. Test files should mirror the structure of the code they're testing and incldue the sub-directory from the code
   - If testing `cli/cli.py`, create `tests/cli/test_cli.py`
   - If testing `core/agents.py`, create `tests/core/test_agents.py`

## Test Function Structure

1. Test functions must be named `test_*`
2. Use descriptive names that explain what is being tested
3. For async tests, use the `@pytest.mark.asyncio` decorator
4. Include a docstring explaining the test's purpose

Example:
```python
@pytest.mark.asyncio
async def test_cli_basic_conversation(mock_inquirer, mock_core_functions):
    """Test a basic conversation flow in the CLI."""
    # Test implementation
```

## Mocking Guidelines

1. Always use pytest fixtures for mocking
2. Place mock fixtures at the top of the test file
3. Use descriptive names for mock fixtures (e.g., `mock_inquirer`, `mock_core_functions`)
4. Mock external dependencies and services
5. Use `unittest.mock.patch` for mocking
6. For async functions, use `AsyncMock`

Example:
```python
@pytest.fixture
def mock_inquirer():
    """Mock the inquirer module to simulate user input."""
    with patch("cli.cli.inquirer") as mock:
        mock.text = AsyncMock()
        yield mock

@pytest.fixture
def mock_core_functions():
    """Mock the core functions that interact with the LLM."""
    with (
        patch("cli.cli.load_agents") as mock_load,
        patch("cli.cli.run_with_langgraph", new_callable=AsyncMock) as mock_run,
    ):
        yield mock_load, mock_run
```

## Test Organization

1. Group related tests in the same file
2. Use clear test names that describe the scenario being tested
3. Include tests for:
   - Happy path (normal operation)
   - Error cases
   - Edge cases
   - Exit/quit conditions

## Assertions and Verifications

1. Use clear, specific assertions
2. Verify both the happy path and error conditions
3. Check mock interactions using `assert_called`, `assert_called_with`, etc.
4. Verify call counts when relevant

Example:
```python
# Verify the interactions
assert mock_load.call_count == 1
assert mock_run.call_count == 2

# Verify specific calls
mock_run.assert_any_call("Hello")
mock_run.assert_any_call("How are you?")
```

## Error Handling Tests

1. Always include tests for error conditions
2. Mock exceptions to test error handling
3. Verify that errors are handled gracefully

Example:
```python
@pytest.mark.asyncio
async def test_cli_error_handling(mock_inquirer, mock_core_functions):
    """Test that the CLI handles errors from run_with_langgraph gracefully."""
    mock_load, mock_run = mock_core_functions
    mock_run.side_effect = Exception("Test error")
    # Test implementation
```

## Best Practices
1. Keep tests focused and atomic
2. One assertion per test when possible
3. Use meaningful test data
4. Clean up resources in fixtures
5. Don't test implementation details, test behavior
6. Use descriptive variable names
7. Include comments for complex test setups

## Common Patterns to Avoid

1. Don't use global variables in tests
2. Don't rely on test execution order
3. Don't make tests dependent on each other
4. Don't use sleep() or time-based delays
5. Don't test private methods directly
